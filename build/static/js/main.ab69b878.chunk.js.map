{"version":3,"sources":["components/Node.js","components/TicTacToeGrid.js","App.js","reportWebVitals.js","index.js"],"names":["Node","position","player1Turn","setPlayer1Turn","setPlayer1","setPlayer2","useState","value","setValue","onClick","prev","className","TicTacToeGrid","grid","setGrid","isGameOver","setIsGameOver","playerWin","setPlayerWin","player1","player2","useEffect","setup","console","log","checkWin","possiblewins","forEach","solution","Object","keys","length","Array","i","createEntries","j","undefined","gridWithNodes","map","row","rowIndex","col","colIndex","style","margin","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab69b878.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport './Node.css';\n\nconst Node = ({position, player1Turn, setPlayer1Turn, setPlayer1, setPlayer2}) => {\n  const [value, setValue] = useState('');\n  const handleClick = () => {\n    if (value === '') {\n      if(player1Turn) {\n        setValue('X');\n        setPlayer1((prev) => {\n          const newMap = {\n            ...prev,\n            [position]: position\n          }\n          return newMap;\n        });\n      } else {\n        setValue('O');\n        setPlayer2((prev) => {\n          const newMap = {\n            ...prev,\n            [position]: position\n          }\n          return newMap;\n        });\n      }\n      setPlayer1Turn(!player1Turn);\n    }\n  }\n  return (\n    <div onClick={handleClick} className={`node node-${position} ${value}`}>\n      <div className={`node-text`}></div>\n    </div>\n  )\n}\n\nexport default Node;\n","import React, {useEffect, useState} from 'react'\nimport Node from './Node';\nimport './TicTacToeGrid.css';\nimport possiblewins from '../utils/possiblewins.json';\n\nfunction TicTacToeGrid() {\n  const ROWS = 3;\n  const COLS = 3;\n  const [grid, setGrid] = useState([]);\n  const [player1Turn, setPlayer1Turn] = useState(true);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [playerWin, setPlayerWin] = useState('');\n  const [player1, setPlayer1] = useState([]);\n  const [player2, setPlayer2] = useState([]);\n\n  useEffect(() => {\n    setup();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    console.log('player1: ', player1);\n    console.log('player2: ', player2);\n    checkWin();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [player1, player2]);\n\n  const checkWin = () => {\n    possiblewins.forEach(solution => {\n      if (\n        player1[solution[0]] &&\n        player1[solution[1]] &&\n        player1[solution[2]]\n      ) {\n        setIsGameOver(true);\n        setPlayerWin('player1');\n        return;\n      } else if (\n        player2[solution[0]] &&\n        player2[solution[1]] &&\n        player2[solution[2]]\n      ) {\n        setIsGameOver(true);\n        setPlayerWin('player2');\n        return;\n      }\n    })\n\n    if(Object.keys(player1).length + Object.keys(player2).length === 9) {\n      setIsGameOver(true)\n      setPlayerWin('Nobody');\n      return;\n    }\n  }\n\n  const setup = () => {\n    const grid = new Array(ROWS);\n    for (let i = 0; i < ROWS; i++) {\n      grid[i] = new Array(COLS);\n    };\n    createEntries(grid);\n    setGrid(grid);\n  }\n\n  const createEntries = (grid) => {\n    for (let i = 0; i < ROWS; i++) {\n      for (let j = 0; j < COLS; j++) {\n        grid[i][j] = undefined;\n      }\n    }\n  };\n\n  const gridWithNodes = (\n    <div>\n      {grid.map((row, rowIndex) => {\n        return (\n          <div className=\"row-wrapper\" key={rowIndex}>\n            {row.map((col, colIndex) => {\n              return (\n              <div className=\"node-div\" key={colIndex}>\n                <Node\n                  key={colIndex}\n                  position={[rowIndex, colIndex]}\n                  player1Turn={player1Turn}\n                  setPlayer1Turn={setPlayer1Turn}\n                  setPlayer1={setPlayer1}\n                  setPlayer2={setPlayer2}\n                />\n              </div>\n            )})}\n          </div>\n        );\n      })}\n    </div>\n  );\n\n  return (\n    <>\n    <h1 style={{margin: 'auto'}}>Tic Tac Toe</h1>\n      {!isGameOver ? (\n      <div className=\"grid-wrapper\">\n        {gridWithNodes}\n      </div>\n      ) : (\n        <div>\n          <h1>Game Over</h1>\n          <h3>{playerWin} Wins!</h3>\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default TicTacToeGrid\n","import './App.css';\nimport TicTacToeGrid from './components/TicTacToeGrid';\n\nfunction App() {\n  return (\n    <TicTacToeGrid />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}